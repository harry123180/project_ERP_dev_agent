# Production Docker Compose Configuration
# ERP System Production Deployment
# Architecture Lead: Winston

version: '3.8'

services:
  # PostgreSQL Database with Performance Optimization
  postgres:
    image: postgres:17-alpine
    container_name: erp_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-erp_system}
      POSTGRES_USER: ${DB_USER:-erp_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/performance_optimization.sql:/docker-entrypoint-initdb.d/02-optimization.sql:ro
      - ./database/postgresql.conf:/var/lib/postgresql/data/postgresql.conf:ro
    command: |
      postgres
        -c config_file=/var/lib/postgresql/data/postgresql.conf
        -c shared_preload_libraries=pg_stat_statements
        -c max_connections=200
        -c shared_buffers=512MB
        -c effective_cache_size=1GB
        -c work_mem=8MB
        -c maintenance_work_mem=128MB
        -c checkpoint_completion_target=0.9
        -c wal_buffers=16MB
        -c random_page_cost=1.1
        -c effective_io_concurrency=200
        -c min_wal_size=1GB
        -c max_wal_size=4GB
    ports:
      - "5432:5432"
    networks:
      - erp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-erp_user} -d ${DB_NAME:-erp_system}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: erp_redis
    restart: unless-stopped
    command: |
      redis-server 
        --maxmemory 512mb 
        --maxmemory-policy allkeys-lru
        --save 900 1
        --save 300 10
        --save 60 10000
        --appendonly yes
        --appendfsync everysec
        --tcp-keepalive 300
        --timeout 300
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - erp_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Application with Load Balancing
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        - BUILD_DATE=${BUILD_DATE}
        - VCS_REF=${VCS_REF}
        - VERSION=${VERSION:-1.0.0}
    container_name: erp_backend_1
    restart: unless-stopped
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-erp_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-erp_system}
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      SECRET_KEY: ${SECRET_KEY}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost,https://erp.company.com}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - erp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Additional Backend Instance for Load Balancing
  backend_2:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: erp_backend_2
    restart: unless-stopped
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-erp_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-erp_system}
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      SECRET_KEY: ${SECRET_KEY}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost,https://erp.company.com}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - erp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - BUILD_DATE=${BUILD_DATE}
        - VCS_REF=${VCS_REF}
        - VERSION=${VERSION:-1.0.0}
        - API_URL=${API_URL:-http://backend:5000}
    container_name: erp_frontend
    restart: unless-stopped
    volumes:
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - erp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer and Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: erp_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN=${DOMAIN:-erp.company.com}
      - SSL_CERT=${SSL_CERT:-/etc/nginx/ssl/cert.pem}
      - SSL_KEY=${SSL_KEY:-/etc/nginx/ssl/key.pem}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - static_files:/var/www/static
    depends_on:
      - frontend
      - backend
    networks:
      - erp_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: erp_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - erp_network

  # Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: erp_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - erp_network

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: erp_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - erp_network

  # Log Shipping
  promtail:
    image: grafana/promtail:latest
    container_name: erp_promtail
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/app:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - erp_network

  # Database Backup Service
  postgres_backup:
    image: prodrigestivill/postgres-backup-local
    container_name: erp_backup
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${DB_NAME:-erp_system}
      - POSTGRES_USER=${DB_USER:-erp_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_EXTRA_OPTS=-Z9 --schema=public --blobs
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=8080
    volumes:
      - ./backups:/backups
    depends_on:
      - postgres
    networks:
      - erp_network

  # Security Scanner (Optional)
  security_scanner:
    image: owasp/zap2docker-stable
    container_name: erp_security
    volumes:
      - ./security:/zap/wrk/:rw
    depends_on:
      - nginx
    networks:
      - erp_network
    profiles:
      - security

# Networks
networks:
  erp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Persistent Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  static_files:
    driver: local

# Secrets (Production)
secrets:
  db_password:
    external: true
  jwt_secret:
    external: true
  ssl_certificate:
    external: true
  ssl_private_key:
    external: true