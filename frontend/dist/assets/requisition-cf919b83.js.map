{"version":3,"file":"requisition-cf919b83.js","sources":["../../src/stores/requisition.ts"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { ref, computed } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport { requisitionApi } from '@/api'\r\nimport type { RequestOrder, RequestOrderItem } from '@/types/common'\r\nimport type { \r\n  RequisitionFilters, \r\n  CreateRequisitionRequest, \r\n  ApproveItemRequest,\r\n  RejectItemRequest,\r\n  QuestionItemRequest,\r\n  RejectRequisitionRequest,\r\n  SaveChangesRequest\r\n} from '@/api/requisition'\r\nimport { handleApiError } from '@/api'\r\n\r\nexport const useRequisitionStore = defineStore('requisition', () => {\r\n  // State\r\n  const requisitions = ref<RequestOrder[]>([])\r\n  const currentRequisition = ref<RequestOrder | null>(null)\r\n  const loading = ref(false)\r\n  const pagination = ref({\r\n    page: 1,\r\n    page_size: 20,\r\n    total: 0,\r\n    pages: 0\r\n  })\r\n  const permissions = ref({\r\n    can_view_all: false,\r\n    user_role: '',\r\n    filtered_to_own: true\r\n  })\r\n  const filters = ref<RequisitionFilters>({\r\n    mine: undefined,  // Let the backend decide based on user role\r\n    status: '',\r\n    page: 1,\r\n    page_size: 20\r\n  })\r\n\r\n  // Getters\r\n  const pendingRequisitions = computed(() => \r\n    requisitions.value.filter(req => req.order_status === 'submitted')\r\n  )\r\n\r\n  const myRequisitions = computed(() => \r\n    requisitions.value.filter(req => req.requester_id === 0) // This would be current user ID\r\n  )\r\n\r\n  const requisitionById = computed(() => (id: string) => \r\n    requisitions.value.find(req => req.request_order_no === id)\r\n  )\r\n\r\n  // Actions\r\n  const fetchRequisitions = async (newFilters?: Partial<RequisitionFilters>) => {\r\n    try {\r\n      loading.value = true\r\n      if (newFilters) {\r\n        filters.value = { ...filters.value, ...newFilters }\r\n      }\r\n\r\n      const response = await requisitionApi.getRequisitions(filters.value)\r\n      requisitions.value = response.items\r\n      pagination.value = response.pagination\r\n      if (response.permissions) {\r\n        permissions.value = response.permissions\r\n      }\r\n    } catch (error) {\r\n      handleApiError(error, '獲取請購單列表失敗')\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const fetchRequisitionDetail = async (id: string) => {\r\n    try {\r\n      loading.value = true\r\n      const requisition = await requisitionApi.getRequisition(id)\r\n      currentRequisition.value = requisition\r\n      return requisition\r\n    } catch (error) {\r\n      handleApiError(error, '獲取請購單詳情失敗')\r\n      throw error\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const createRequisition = async (data: CreateRequisitionRequest) => {\r\n    try {\r\n      loading.value = true\r\n      const requisition = await requisitionApi.createRequisition(data)\r\n      requisitions.value.unshift(requisition)\r\n      ElMessage.success('請購單創建成功')\r\n      return requisition\r\n    } catch (error) {\r\n      handleApiError(error, '創建請購單失敗')\r\n      throw error\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const updateRequisition = async (id: string, data: Partial<CreateRequisitionRequest>) => {\r\n    try {\r\n      loading.value = true\r\n      const updatedRequisition = await requisitionApi.updateRequisition(id, data)\r\n      \r\n      // Update in list\r\n      const index = requisitions.value.findIndex(req => req.request_order_no === id)\r\n      if (index !== -1) {\r\n        requisitions.value[index] = updatedRequisition\r\n      }\r\n      \r\n      // Update current if it's the same one\r\n      if (currentRequisition.value?.request_order_no === id) {\r\n        currentRequisition.value = updatedRequisition\r\n      }\r\n\r\n      ElMessage.success('請購單更新成功')\r\n      return updatedRequisition\r\n    } catch (error) {\r\n      handleApiError(error, '更新請購單失敗')\r\n      throw error\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const submitRequisition = async (id: string) => {\r\n    try {\r\n      loading.value = true\r\n      const submittedRequisition = await requisitionApi.submitRequisition(id)\r\n      \r\n      // Update in list\r\n      const index = requisitions.value.findIndex(req => req.request_order_no === id)\r\n      if (index !== -1) {\r\n        requisitions.value[index] = submittedRequisition\r\n      }\r\n      \r\n      // Update current if it's the same one\r\n      if (currentRequisition.value?.request_order_no === id) {\r\n        currentRequisition.value = submittedRequisition\r\n      }\r\n\r\n      ElMessage.success('請購單提交成功')\r\n      return submittedRequisition\r\n    } catch (error) {\r\n      handleApiError(error, '提交請購單失敗')\r\n      throw error\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const approveItem = async (requisitionId: string, detailId: number, data: ApproveItemRequest) => {\r\n    try {\r\n      loading.value = true\r\n      const updatedItem = await requisitionApi.approveItem(requisitionId, detailId, data)\r\n      \r\n      // CRITICAL FIX: Enhanced refresh with retry logic\r\n      await refreshRequisitionWithRetry(requisitionId, 3)\r\n      \r\n      ElMessage.success('項目審核通過')\r\n      return updatedItem\r\n    } catch (error) {\r\n      handleApiError(error, '審核項目失敗')\r\n      throw error\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const questionItem = async (requisitionId: string, detailId: number, data: QuestionItemRequest) => {\r\n    try {\r\n      loading.value = true\r\n      const updatedItem = await requisitionApi.questionItem(requisitionId, detailId, data)\r\n      \r\n      // CRITICAL FIX: Enhanced refresh with retry logic\r\n      await refreshRequisitionWithRetry(requisitionId, 3)\r\n      \r\n      ElMessage.success('項目標記為有疑問')\r\n      return updatedItem\r\n    } catch (error) {\r\n      handleApiError(error, '標記項目疑問失敗')\r\n      throw error\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const rejectItem = async (requisitionId: string, detailId: number, data: RejectItemRequest) => {\r\n    try {\r\n      loading.value = true\r\n      const updatedItem = await requisitionApi.rejectItem(requisitionId, detailId, data)\r\n      \r\n      // CRITICAL FIX: Enhanced refresh with retry logic\r\n      await refreshRequisitionWithRetry(requisitionId, 3)\r\n      \r\n      ElMessage.success('項目已駁回')\r\n      return updatedItem\r\n    } catch (error) {\r\n      handleApiError(error, '駁回項目失敗')\r\n      throw error\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const rejectRequisition = async (id: string, data: RejectRequisitionRequest) => {\r\n    try {\r\n      loading.value = true\r\n      const rejectedRequisition = await requisitionApi.rejectRequisition(id, data)\r\n      \r\n      // Update in list\r\n      const index = requisitions.value.findIndex(req => req.request_order_no === id)\r\n      if (index !== -1) {\r\n        requisitions.value[index] = rejectedRequisition\r\n      }\r\n      \r\n      // Update current if it's the same one\r\n      if (currentRequisition.value?.request_order_no === id) {\r\n        currentRequisition.value = rejectedRequisition\r\n      }\r\n\r\n      ElMessage.success('請購單已駁回')\r\n      return rejectedRequisition\r\n    } catch (error) {\r\n      handleApiError(error, '駁回請購單失敗')\r\n      throw error\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  // CRITICAL FIX: Enhanced refresh with retry and status polling\r\n  const refreshRequisitionWithRetry = async (requisitionId: string, maxRetries: number = 3) => {\r\n    console.log(`[STORE_FIX] Refreshing requisition ${requisitionId} with retry logic`)\r\n    \r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        console.log(`[STORE_FIX] Refresh attempt ${attempt}/${maxRetries}`)\r\n        \r\n        // Add delay between attempts to allow backend processing\r\n        if (attempt > 1) {\r\n          await new Promise(resolve => setTimeout(resolve, 1000 * attempt))\r\n        }\r\n        \r\n        const refreshedRequisition = await requisitionApi.getRequisition(requisitionId)\r\n        \r\n        // Update current requisition\r\n        if (currentRequisition.value?.request_order_no === requisitionId) {\r\n          console.log(`[STORE_FIX] Updating current requisition status: ${currentRequisition.value.order_status} -> ${refreshedRequisition.order_status}`)\r\n          currentRequisition.value = refreshedRequisition\r\n        }\r\n        \r\n        // Update in list if found\r\n        const index = requisitions.value.findIndex(req => req.request_order_no === requisitionId)\r\n        if (index !== -1) {\r\n          console.log(`[STORE_FIX] Updating requisition in list status: ${requisitions.value[index].order_status} -> ${refreshedRequisition.order_status}`)\r\n          requisitions.value[index] = refreshedRequisition\r\n        }\r\n        \r\n        console.log(`[STORE_FIX] Successfully refreshed requisition on attempt ${attempt}`)\r\n        return refreshedRequisition\r\n        \r\n      } catch (error) {\r\n        console.error(`[STORE_FIX] Refresh attempt ${attempt} failed:`, error)\r\n        if (attempt === maxRetries) {\r\n          throw error\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  // CRITICAL FIX: Status polling for real-time updates\r\n  const pollRequisitionStatus = async (requisitionId: string, expectedStatus: string, maxAttempts: number = 5) => {\r\n    console.log(`[STORE_FIX] Polling for status change to '${expectedStatus}' for requisition ${requisitionId}`)\r\n    \r\n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\r\n      try {\r\n        const requisition = await requisitionApi.getRequisition(requisitionId)\r\n        console.log(`[STORE_FIX] Poll attempt ${attempt}: current status '${requisition.order_status}'`)\r\n        \r\n        if (requisition.order_status === expectedStatus) {\r\n          console.log(`[STORE_FIX] Status change detected! Updating store.`)\r\n          \r\n          // Update current requisition\r\n          if (currentRequisition.value?.request_order_no === requisitionId) {\r\n            currentRequisition.value = requisition\r\n          }\r\n          \r\n          // Update in list\r\n          const index = requisitions.value.findIndex(req => req.request_order_no === requisitionId)\r\n          if (index !== -1) {\r\n            requisitions.value[index] = requisition\r\n          }\r\n          \r\n          return requisition\r\n        }\r\n        \r\n        // Wait before next poll\r\n        if (attempt < maxAttempts) {\r\n          await new Promise(resolve => setTimeout(resolve, 1000))\r\n        }\r\n        \r\n      } catch (error) {\r\n        console.error(`[STORE_FIX] Poll attempt ${attempt} failed:`, error)\r\n      }\r\n    }\r\n    \r\n    console.log(`[STORE_FIX] Polling completed without status change to '${expectedStatus}'`)\r\n    return null\r\n  }\r\n\r\n  // EMERGENCY HOTFIX: Save changes without approval\r\n  const saveItemChanges = async (requisitionId: string, detailId: number, data: SaveChangesRequest) => {\r\n    try {\r\n      console.log(`[STORE_HOTFIX] Saving changes for ${requisitionId}/${detailId}:`, data)\r\n      const updatedItem = await requisitionApi.saveItemChanges(requisitionId, detailId, data)\r\n      \r\n      // Update the item in the current requisition if it exists\r\n      if (currentRequisition.value?.request_order_no === requisitionId) {\r\n        const itemIndex = currentRequisition.value.items?.findIndex(item => item.detail_id === detailId)\r\n        if (itemIndex !== -1 && currentRequisition.value.items) {\r\n          currentRequisition.value.items[itemIndex] = updatedItem\r\n        }\r\n      }\r\n      \r\n      console.log(`[STORE_HOTFIX] Changes saved successfully for ${requisitionId}/${detailId}`)\r\n      return updatedItem\r\n    } catch (error) {\r\n      handleApiError(error, '保存變更失敗')\r\n      throw error\r\n    }\r\n  }\r\n\r\n  const clearCurrentRequisition = () => {\r\n    currentRequisition.value = null\r\n  }\r\n\r\n  return {\r\n    // State\r\n    requisitions,\r\n    currentRequisition,\r\n    loading,\r\n    pagination,\r\n    permissions,\r\n    filters,\r\n\r\n    // Getters\r\n    pendingRequisitions,\r\n    myRequisitions,\r\n    requisitionById,\r\n\r\n    // Actions\r\n    fetchRequisitions,\r\n    fetchRequisitionDetail,\r\n    createRequisition,\r\n    updateRequisition,\r\n    submitRequisition,\r\n    approveItem,\r\n    questionItem,\r\n    rejectItem,\r\n    rejectRequisition,\r\n    clearCurrentRequisition,\r\n    // CRITICAL FIX: New status management methods\r\n    refreshRequisitionWithRetry,\r\n    pollRequisitionStatus,\r\n    // EMERGENCY HOTFIX: Save changes method\r\n    saveItemChanges\r\n  }\r\n})"],"names":["useRequisitionStore","defineStore","requisitions","ref","currentRequisition","loading","pagination","permissions","filters","pendingRequisitions","computed","req","myRequisitions","requisitionById","id","fetchRequisitions","newFilters","response","requisitionApi","error","handleApiError","fetchRequisitionDetail","requisition","createRequisition","data","ElMessage","updateRequisition","updatedRequisition","index","_a","submitRequisition","submittedRequisition","approveItem","requisitionId","detailId","updatedItem","refreshRequisitionWithRetry","questionItem","rejectItem","rejectRequisition","rejectedRequisition","maxRetries","attempt","resolve","refreshedRequisition","expectedStatus","maxAttempts","itemIndex","_b","item"],"mappings":"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"}