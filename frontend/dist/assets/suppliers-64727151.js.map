{"version":3,"file":"suppliers-64727151.js","sources":["../../src/stores/suppliers.ts"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { ref, computed } from 'vue'\r\nimport api from '@/api'\r\n\r\nexport interface Supplier {\r\n  supplier_id: string\r\n  supplier_name_zh: string\r\n  supplier_name_en?: string\r\n  supplier_address?: string\r\n  supplier_phone?: string\r\n  supplier_email?: string\r\n  supplier_contact_person?: string\r\n  supplier_tax_id?: string\r\n  supplier_region: 'domestic' | 'international'\r\n  supplier_remark?: string\r\n  payment_terms?: string\r\n  bank_account?: string\r\n  is_active: boolean\r\n  created_at: string\r\n  updated_at: string\r\n}\r\n\r\nexport interface SupplierSummary {\r\n  supplier_id: string\r\n  supplier_name_zh: string\r\n  supplier_name_en?: string\r\n  supplier_region: 'domestic' | 'international'\r\n  is_active: boolean\r\n}\r\n\r\nexport interface SuppliersListParams {\r\n  page?: number\r\n  page_size?: number\r\n  region?: 'domestic' | 'international'\r\n  active?: boolean\r\n  q?: string\r\n}\r\n\r\nexport interface SuppliersListResponse {\r\n  items: Supplier[]\r\n  pagination: {\r\n    page: number\r\n    page_size: number\r\n    total: number\r\n    pages: number\r\n    has_next: boolean\r\n    has_prev: boolean\r\n  }\r\n}\r\n\r\nexport const useSuppliersStore = defineStore('suppliers', () => {\r\n  // State\r\n  const suppliers = ref<Supplier[]>([])\r\n  const currentSupplier = ref<Supplier | null>(null)\r\n  const suppliersSummary = ref<SupplierSummary[]>([])\r\n  const loading = ref(false)\r\n  const pagination = ref({\r\n    page: 1,\r\n    page_size: 20,\r\n    total: 0,\r\n    pages: 0,\r\n    has_next: false,\r\n    has_prev: false\r\n  })\r\n\r\n  // Getters\r\n  const activeSuppliers = computed(() => \r\n    suppliers.value.filter(supplier => supplier.is_active)\r\n  )\r\n\r\n  const domesticSuppliers = computed(() => \r\n    suppliers.value.filter(supplier => supplier.supplier_region === 'domestic')\r\n  )\r\n\r\n  const internationalSuppliers = computed(() => \r\n    suppliers.value.filter(supplier => supplier.supplier_region === 'international')\r\n  )\r\n\r\n  const getSupplierById = computed(() => {\r\n    return (id: string) => suppliers.value.find(supplier => supplier.supplier_id === id)\r\n  })\r\n\r\n  // Actions\r\n  const fetchSuppliers = async (params: SuppliersListParams = {}) => {\r\n    loading.value = true\r\n    try {\r\n      const response = await api.get<SuppliersListResponse>('/suppliers', {\r\n        params: {\r\n          page: params.page || 1,\r\n          page_size: params.page_size || 20,\r\n          ...(params.region && { region: params.region }),\r\n          ...(params.active !== undefined && { active: params.active }),\r\n          ...(params.q && { q: params.q })\r\n        }\r\n      })\r\n\r\n      // response.data is already the SuppliersListResponse object\r\n      const data = response.data\r\n      suppliers.value = data.items || []\r\n      pagination.value = data.pagination || {\r\n        page: 1,\r\n        page_size: 20,\r\n        total: 0,\r\n        pages: 0,\r\n        has_next: false,\r\n        has_prev: false\r\n      }\r\n      \r\n      return data\r\n    } catch (error) {\r\n      console.error('Error fetching suppliers:', error)\r\n      throw error\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const fetchSupplierById = async (id: string) => {\r\n    loading.value = true\r\n    try {\r\n      const response = await api.get<Supplier>(`/suppliers/${id}`)\r\n      const supplier = response.data\r\n      currentSupplier.value = supplier\r\n      return supplier\r\n    } catch (error) {\r\n      console.error('Error fetching supplier:', error)\r\n      throw error\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const createSupplier = async (supplierData: Partial<Supplier>) => {\r\n    loading.value = true\r\n    try {\r\n      const response = await api.post<Supplier>('/suppliers', supplierData)\r\n      suppliers.value.unshift(response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error creating supplier:', error)\r\n      throw error\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const updateSupplier = async (id: string, supplierData: Partial<Supplier>) => {\r\n    loading.value = true\r\n    try {\r\n      const response = await api.put<Supplier>(`/suppliers/${id}`, supplierData)\r\n      \r\n      const index = suppliers.value.findIndex(supplier => supplier.supplier_id === id)\r\n      if (index !== -1) {\r\n        suppliers.value[index] = response.data\r\n      }\r\n      \r\n      if (currentSupplier.value?.supplier_id === id) {\r\n        currentSupplier.value = response.data\r\n      }\r\n      \r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error updating supplier:', error)\r\n      throw error\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const fetchSuppliersSummary = async (params: { region?: string; active?: boolean } = {}) => {\r\n    loading.value = true\r\n    try {\r\n      const response = await api.get<SupplierSummary[]>('/suppliers/summary', {\r\n        params: {\r\n          ...(params.region && { region: params.region }),\r\n          ...(params.active !== undefined && { active: params.active })\r\n        }\r\n      })\r\n      \r\n      const summaryData = response.data || []\r\n      suppliersSummary.value = summaryData\r\n      return summaryData\r\n    } catch (error) {\r\n      console.error('Error fetching suppliers summary:', error)\r\n      throw error\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const clearCurrentSupplier = () => {\r\n    currentSupplier.value = null\r\n  }\r\n\r\n  const clearSuppliers = () => {\r\n    suppliers.value = []\r\n    pagination.value = {\r\n      page: 1,\r\n      page_size: 20,\r\n      total: 0,\r\n      pages: 0,\r\n      has_next: false,\r\n      has_prev: false\r\n    }\r\n  }\r\n\r\n  return {\r\n    // State\r\n    suppliers,\r\n    currentSupplier,\r\n    suppliersSummary,\r\n    loading,\r\n    pagination,\r\n    \r\n    // Getters\r\n    activeSuppliers,\r\n    domesticSuppliers,\r\n    internationalSuppliers,\r\n    getSupplierById,\r\n    \r\n    // Actions\r\n    fetchSuppliers,\r\n    fetchSupplierById,\r\n    createSupplier,\r\n    updateSupplier,\r\n    fetchSuppliersSummary,\r\n    clearCurrentSupplier,\r\n    clearSuppliers\r\n  }\r\n})"],"names":["useSuppliersStore","defineStore","suppliers","ref","currentSupplier","suppliersSummary","loading","pagination","activeSuppliers","computed","supplier","domesticSuppliers","internationalSuppliers","getSupplierById","id","params","data","api","error","supplierData","response","index","_a","summaryData"],"mappings":"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"}