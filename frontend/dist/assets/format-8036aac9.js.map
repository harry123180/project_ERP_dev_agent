{"version":3,"file":"format-8036aac9.js","sources":["../../src/utils/format.ts"],"sourcesContent":["/**\r\n * Format utilities for the ERP application\r\n */\r\n\r\nimport dayjs from 'dayjs'\r\n\r\n/**\r\n * Format currency amount\r\n * @param amount - The amount to format\r\n * @param currency - Currency symbol (default: 'NT$')\r\n * @returns Formatted currency string\r\n */\r\nexport const formatCurrency = (amount: number | string | null | undefined, currency = 'NT$'): string => {\r\n  if (amount === null || amount === undefined || amount === '') {\r\n    return `${currency} 0`\r\n  }\r\n  \r\n  const num = typeof amount === 'string' ? parseFloat(amount) : amount\r\n  if (isNaN(num)) {\r\n    return `${currency} 0`\r\n  }\r\n  \r\n  return `${currency} ${num.toLocaleString('zh-TW')}`\r\n}\r\n\r\n/**\r\n * Format date\r\n * @param date - Date to format (string, Date, or dayjs object)\r\n * @param format - Format string (default: 'YYYY-MM-DD HH:mm:ss')\r\n * @returns Formatted date string\r\n */\r\nexport const formatDate = (date: any, format = 'YYYY-MM-DD HH:mm:ss'): string => {\r\n  if (!date) {\r\n    return '-'\r\n  }\r\n  \r\n  return dayjs(date).format(format)\r\n}\r\n\r\n/**\r\n * Format date (date only)\r\n * @param date - Date to format\r\n * @returns Formatted date string (YYYY-MM-DD)\r\n */\r\nexport const formatDateOnly = (date: any): string => {\r\n  return formatDate(date, 'YYYY-MM-DD')\r\n}\r\n\r\n/**\r\n * Format time (time only)\r\n * @param date - Date to format\r\n * @returns Formatted time string (HH:mm:ss)\r\n */\r\nexport const formatTimeOnly = (date: any): string => {\r\n  return formatDate(date, 'HH:mm:ss')\r\n}\r\n\r\n/**\r\n * Format number with specified decimal places\r\n * @param num - Number to format\r\n * @param decimals - Number of decimal places (default: 2)\r\n * @returns Formatted number string\r\n */\r\nexport const formatNumber = (num: number | string | null | undefined, decimals = 2): string => {\r\n  if (num === null || num === undefined || num === '') {\r\n    return '0'\r\n  }\r\n  \r\n  const number = typeof num === 'string' ? parseFloat(num) : num\r\n  if (isNaN(number)) {\r\n    return '0'\r\n  }\r\n  \r\n  return number.toFixed(decimals)\r\n}\r\n\r\n/**\r\n * Format percentage\r\n * @param value - Value to format as percentage (0-1)\r\n * @param decimals - Number of decimal places (default: 1)\r\n * @returns Formatted percentage string\r\n */\r\nexport const formatPercentage = (value: number | string | null | undefined, decimals = 1): string => {\r\n  if (value === null || value === undefined || value === '') {\r\n    return '0%'\r\n  }\r\n  \r\n  const num = typeof value === 'string' ? parseFloat(value) : value\r\n  if (isNaN(num)) {\r\n    return '0%'\r\n  }\r\n  \r\n  return `${(num * 100).toFixed(decimals)}%`\r\n}\r\n\r\n/**\r\n * Format file size\r\n * @param bytes - File size in bytes\r\n * @returns Formatted file size string\r\n */\r\nexport const formatFileSize = (bytes: number | null | undefined): string => {\r\n  if (!bytes || bytes === 0) {\r\n    return '0 B'\r\n  }\r\n  \r\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB']\r\n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\r\n  \r\n  return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`\r\n}\r\n\r\n/**\r\n * Truncate text with ellipsis\r\n * @param text - Text to truncate\r\n * @param maxLength - Maximum length (default: 50)\r\n * @returns Truncated text\r\n */\r\nexport const truncateText = (text: string | null | undefined, maxLength = 50): string => {\r\n  if (!text) {\r\n    return ''\r\n  }\r\n  \r\n  if (text.length <= maxLength) {\r\n    return text\r\n  }\r\n  \r\n  return `${text.substring(0, maxLength)}...`\r\n}\r\n\r\n/**\r\n * Format phone number\r\n * @param phone - Phone number to format\r\n * @returns Formatted phone number\r\n */\r\nexport const formatPhone = (phone: string | null | undefined): string => {\r\n  if (!phone) {\r\n    return ''\r\n  }\r\n  \r\n  // Remove all non-digits\r\n  const cleaned = phone.replace(/\\D/g, '')\r\n  \r\n  // Format based on length\r\n  if (cleaned.length === 10) {\r\n    // Mobile: 0912-345-678\r\n    return cleaned.replace(/(\\d{4})(\\d{3})(\\d{3})/, '$1-$2-$3')\r\n  } else if (cleaned.length === 9) {\r\n    // Landline: 02-1234-5678\r\n    return cleaned.replace(/(\\d{2})(\\d{4})(\\d{3})/, '$1-$2-$3')\r\n  }\r\n  \r\n  return phone\r\n}\r\n\r\n/**\r\n * Format ID number (mask middle digits)\r\n * @param id - ID number to format\r\n * @returns Masked ID number\r\n */\r\nexport const formatMaskedId = (id: string | null | undefined): string => {\r\n  if (!id || id.length < 6) {\r\n    return id || ''\r\n  }\r\n  \r\n  const start = id.substring(0, 3)\r\n  const end = id.substring(id.length - 3)\r\n  const middle = '*'.repeat(id.length - 6)\r\n  \r\n  return `${start}${middle}${end}`\r\n}"],"names":["formatCurrency","amount","currency","num","formatDate","date","format","dayjs"],"mappings":"yCAYO,MAAMA,EAAiB,CAACC,EAA4CC,EAAW,QAAkB,CACtG,GAAID,GAAW,MAAgCA,IAAW,GACxD,MAAO,GAAGC,CAAQ,KAGpB,MAAMC,EAAM,OAAOF,GAAW,SAAW,WAAWA,CAAM,EAAIA,EAC1D,OAAA,MAAME,CAAG,EACJ,GAAGD,CAAQ,KAGb,GAAGA,CAAQ,IAAIC,EAAI,eAAe,OAAO,CAAC,EACnD,EAQaC,EAAa,CAACC,EAAWC,EAAS,wBACxCD,EAIEE,EAAMF,CAAI,EAAE,OAAOC,CAAM,EAHvB"}