{
  "schema_version": "1.0",
  "generated_by": "erp-backend-lead",
  "endpoints": [
    "GET /api/v1/auth/login - User authentication with JWT token",
    "POST /api/v1/auth/logout - User logout and token invalidation",
    "GET /api/v1/auth/refresh - Refresh JWT token",
    "GET /api/v1/requisitions - List requisitions with filtering (mine=true/false, status, page, page_size)",
    "POST /api/v1/requisitions - Create new requisition with items",
    "GET /api/v1/requisitions/:id - Get requisition details with items and history",
    "PUT /api/v1/requisitions/:id - Update draft requisition",
    "POST /api/v1/requisitions/:id/submit - Submit requisition for review",
    "POST /api/v1/requisitions/:id/lines/:detailId/approve - Approve requisition line (requires supplier_id, unit_price)",
    "POST /api/v1/requisitions/:id/lines/:detailId/question - Mark line as questioned (requires reason)",
    "POST /api/v1/requisitions/:id/lines/:detailId/reject - Reject requisition line (requires reason)",
    "POST /api/v1/requisitions/:id/reject - Reject entire requisition (requires reason)",
    "GET /api/v1/po/build-candidates - Get approved items grouped by supplier for PO creation",
    "POST /api/v1/po - Create purchase order from requisition lines",
    "GET /api/v1/po - List purchase orders with filtering (status, supplier_id, page, page_size)",
    "GET /api/v1/po/:poNo - Get purchase order details with line items",
    "PUT /api/v1/po/:poNo - Update purchase order details and recalculate totals",
    "POST /api/v1/po/:poNo/confirm - Confirm purchase order (idempotent with Idempotency-Key)",
    "POST /api/v1/po/:poNo/withdraw - Withdraw purchase order with reason",
    "POST /api/v1/po/:poNo/reorganize - Reorganize purchase order items with reason",
    "GET /api/v1/leadtime - Get shipment tracking data (visible_only=true for active shipments)",
    "POST /api/v1/po/:poNo/milestone - Update shipping milestone for purchase order",
    "POST /api/v1/consolidations - Create shipping consolidation for international orders",
    "POST /api/v1/consolidations/:id/po - Add purchase order to consolidation",
    "POST /api/v1/consolidations/:id/bulk-milestone - Update milestone for all POs in consolidation",
    "GET /api/v1/receiving - List items ready for receiving (region=domestic/international, supplier_id)",
    "GET /api/v1/receiving/po/:poNo - Get receiving details for specific purchase order",
    "POST /api/v1/receiving/po/:poNo/items/:detailId/confirm - Confirm item receipt",
    "GET /api/v1/putaway - List items ready for storage assignment (status=arrived)",
    "POST /api/v1/putaway/assign - Assign storage location and create movement record",
    "GET /api/v1/storage/tree - Get storage hierarchy (Zone->Shelf->Floor structure)",
    "POST /api/v1/storage/quick-in - Quick storage entry bypassing normal flow",
    "POST /api/v1/storage/admin/zones - Admin endpoints for storage zone management",
    "POST /api/v1/storage/admin/shelves - Admin endpoints for shelf management",
    "GET /api/v1/acceptance/mine - Get pending acceptance items for current user",
    "POST /api/v1/acceptance/confirm - Confirm acceptance of received item",
    "GET /api/v1/inventory - Query inventory with multiple filters (name, spec, request_no, po_no, usage_type, zone, shelf, floor)",
    "POST /api/v1/inventory/issue - Issue inventory item (requires item_ref, storage_id, qty)",
    "GET /api/v1/ap/billing/candidates - Get unbilled purchase orders for supplier billing (supplier_id, month)",
    "POST /api/v1/ap/billing - Generate billing batch for supplier with payment terms",
    "POST /api/v1/ap/billing/:id/mark-paid - Mark billing batch as paid (idempotent)",
    "POST /api/v1/ap/po/:poNo/mark-paid - Mark individual PO as paid",
    "GET /api/v1/ap/history - Get payment history with filtering (supplier_id, month, paid status)",
    "GET /api/v1/suppliers - List suppliers with filtering (region, active status)",
    "POST /api/v1/suppliers - Create new supplier",
    "GET /api/v1/suppliers/:id - Get supplier details",
    "PUT /api/v1/suppliers/:id - Update supplier information",
    "GET /api/v1/projects - List projects with filtering",
    "POST /api/v1/projects - Create new project",
    "GET /api/v1/projects/:id - Get project details with expenditure tracking",
    "PUT /api/v1/projects/:id - Update project information",
    "GET /api/v1/users - List users (admin only)",
    "POST /api/v1/users - Create new user (admin only)",
    "GET /api/v1/users/:id - Get user profile",
    "PUT /api/v1/users/:id - Update user profile",
    "GET /api/v1/system/settings - Get system settings (tax rates, etc.)",
    "PUT /api/v1/system/settings - Update system settings (admin only)"
  ],
  "models": [
    "User - System user with authentication and role management",
    "Supplier - Supplier master data with contact and payment information", 
    "ItemCategory - Item classification and categorization system",
    "RequestOrder - Purchase requisition header with status tracking",
    "RequestOrderItem - Individual line items in requisitions with approval workflow",
    "PurchaseOrder - Purchase order header with supplier and totals calculation",
    "PurchaseOrderItem - Line items in purchase orders linked to requisitions",
    "ShipmentConsolidation - Container/consolidation for grouping international shipments",
    "ConsolidationPO - Association between consolidations and purchase orders",
    "LogisticsEvent - Event tracking for shipping milestones and status changes",
    "Storage - Storage location hierarchy (zone/shelf/floor/position)",
    "StorageHistory - Movement tracking for inventory in/out operations",
    "Project - Project master data for expenditure tracking",
    "ProjectSupplierExpenditure - Project-supplier expenditure relationships",
    "SystemSettings - System configuration including tax rates and business rules",
    "RequisitionService - Business logic for requisition lifecycle management",
    "ProcurementService - Business logic for purchase order creation and management", 
    "ShippingService - Business logic for tracking and milestone updates",
    "InventoryService - Business logic for inventory operations and queries",
    "AccountingService - Business logic for billing generation and payment tracking",
    "AuthenticationService - JWT token management and role-based access control",
    "CalculationService - Financial calculations with proper rounding rules",
    "AuditService - Audit trail creation for business transactions"
  ],
  "acceptance": [
    "All endpoints must implement proper JWT authentication with @jwt_required decorator",
    "Role-based access control must be enforced using @require_roles decorator",
    "Input validation using Marshmallow/Pydantic schemas for all POST/PUT endpoints",
    "Proper HTTP status codes: 200 (OK), 201 (Created), 204 (No Content), 400 (Bad Request), 401 (Unauthorized), 403 (Forbidden), 404 (Not Found), 409 (Conflict), 422 (Unprocessable Entity)",
    "Error responses must follow standard format: {error: {code, message, details}}",
    "Idempotency support for state-changing operations using Idempotency-Key header",
    "Database transactions for multi-table operations with proper rollback handling",
    "Pagination support for list endpoints with page/page_size parameters",
    "Filtering and sorting capabilities for all list endpoints",
    "Proper decimal/integer handling for financial calculations (quantity: positive integers, price: positive decimals, subtotal: rounded integers, tax: 1 decimal place, total: rounded integers)",
    "Audit logging for all business-critical operations (approvals, purchases, payments)",
    "State machine validation for status transitions (e.g., draft->submitted->reviewed)",
    "Foreign key integrity and cascade delete handling",
    "Proper timestamp handling with timezone awareness",
    "SQL injection prevention through parameterized queries",
    "Database connection pooling and proper resource cleanup",
    "Unit tests for all service layer methods with 80%+ coverage",
    "Integration tests for critical business workflows",
    "API documentation using Swagger/OpenAPI specification",
    "Logging using Python logging module with appropriate log levels",
    "Environment-based configuration using python-dotenv",
    "Database migration scripts for schema changes",
    "Performance optimization for complex queries with proper indexing",
    "CORS configuration for frontend integration",
    "Request/response data validation and sanitization",
    "Proper handling of file uploads for document attachments"
  ]
}